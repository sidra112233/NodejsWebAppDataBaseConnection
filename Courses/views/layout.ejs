<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
    <title>Course Management</title>
<style>
    
  body {
    margin: 0;
    font-family: Arial, sans-serif;
    color: #2E073F;
    display: flex;
    flex-direction: column;
    height: 100vh;
}

.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: linear-gradient(135deg, #e3f2fd, #bbdefb, #90caf9); /* Light blue gradient */
    padding: 10px 20px;
}

.navbar-left {
    display: flex;
    align-items: center;
}

.logo {
    height: 40px;
    margin-right: 10px;
}

.site-name {
    color: #1D3557; /* Deep blue text color */
    font-size: 1.5em;
}

.navbar-right a {
    color: #1D3557; /* Deep blue text color */
    padding: 14px 20px;
    text-decoration: none;
    text-align: center;
}

.navbar-right a:hover {
    background-color: #A8DADC; /* Light teal on hover */
}

@media screen and (max-width: 500px) {
    .navbar a {
        float: none;
        display: block;
    }
}

.register-btn {
    border: 1px solid #1D3557; /* Deep blue border */
    border-radius: 5px;
}

/* Main container for sidebar and content */
.main-container {
    display: flex;
    flex: 1;
    overflow: hidden;
    height: calc(100vh - 60px); /* Adjust height based on navbar height */
}
/* Sidebar styling */
#sidebar {
    width: 250px;
    background: linear-gradient(135deg, #f9f9f9, #e0f7fa, #f0e9d2); /* Gradient with light gray, light blue, and beige */
    color: #1D3557; /* Deep blue text color */
    padding: 15px;
    overflow-y: auto;
    height: 100%;
}

.logo1 {
    height: 150px;
    width: 200px;

margin-top:0;
}

/* Content styling */
#content {
    flex: 1;
    padding: 10px;
    overflow-y: auto;
    height: 100%;
    background: white 
}
.module-navigation {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    margin: 20px;
    padding: 10px 0;
    margin-bottom: 20px;
    gap: 15px; /* Add space between buttons */
}

.nav-btn {
    background-color: #457B9D; /* Soft blue color */
    color: white;
    border: none;
    padding: 10px 20px;
    text-align: center;
    font-size: 1em;
    cursor: pointer;
    border-radius: 5px;
    transition: background-color 0.3s ease;
}

.nav-btn:hover {
    background-color: #1D3557; /* Dark navy blue on hover */
}

#course-list, .module-list ul, #material-list {
    list-style-type: none;
    padding: 0;
    margin: 0;
}
#quiz-list a ,#exercise-list a{
    text-decoration: none;
    color: white; /* White text on hover */
    display: block;
    padding: 10px;
    background-color: #3399FF; /* Darker blue */
    border-radius: 5px;
    margin-bottom: 50px;
    transition: background-color 0.3s ease, color 0.3s ease;
    width: 200px;
}

#quiz-list a:hover ,#exercise-list a:hover{
    background-color: #004080; /* Even darker blue */
    color: white; /* White text on hover */
    text-decoration: none;
}


#course-list li, .module-list ul li {
    margin-bottom: 10px;
}

#course-list a, .module-list a, .material-link {
    text-decoration: none;
    color: #1D3557; /* Deep blue text color */
    display: block;
    padding: 5px;
    margin-bottom: 20px;
}

.module-list {
    display: none;
    padding-left: 20px;
}

.module-list a:hover, #course-list a:hover, .material-link:hover {
    text-decoration: underline;
}

.material-description {
    color: #457B9D; /* Soft blue for material description */
    font-style: italic;
    margin-bottom: 5px;
}

.loading {
    font-style: italic;
    color: #555;
}
/* General heading styling */
h2, h3,h4 {
    color: #003366; /* Dark navy blue for better contrast */
    font-family: 'Poppins', sans-serif; /* Use a modern sans-serif font like Poppins */
    font-weight: 600;
    text-transform: uppercase;
    position: relative;
    margin-bottom: 20px;
    text-align: left; /* Align to the left */
    z-index: 1; /* Ensure text stays on top */
}

/* Static underline (fill bar) effect */
h2::after, h3::after {
    content: '';
    width: 100%;
    height: 35px; /* Thickness of the fill bar */
    background: #00509e; /* Plain navy blue */
    position: absolute;
    bottom: 0;
    left: 0;
    z-index: -1; /* Behind the text */
        transition: width 0.5s ease;

}

/* Full width fill effect on hover without transition */
h2:hover::after, h3:hover::after {
    width: 100%; /* Fill the heading fully on hover */
}

/* For specific section headings */
#course-name {
    color: white; /* Navy blue color for course name */
    font-size: 2em;
    text-align: center; /* Center the text */
}

#module-name {
    color: #00509e; /* Soft blue for module name */
    font-size: 1.8em;
}

#material-list h3, #quiz-list h3, #exercise-list h3 {
    color: white; /* Darker blue */
    font-size: 1.9em;
    text-align: center; /* Center the text */
}

    </style>
</head>
<body>

<!-- Navbar -->
<nav class="navbar">
    <div class="navbar-left">
        <img src="/images/Logo.png" alt="Logo" class="logo">
        <span class="site-name">LEARN CODE PRO</span>
    </div>
    <div class="navbar-right">
        <a href="/">Home</a>
    </div>
</nav>
<!-- Main container for sidebar and content -->
<div class="main-container">
    <div id="sidebar">
        <img src="/images/Logo.png" alt="Logo" class="logo1">
        <h4>Courses</h4>
        <ul id="course-list">
   <% if (courses && courses.length > 0) { %>
    <% courses.forEach(course => { %>
        <% if (course.course_id == selectedCourse) { %> <!-- Only display selected course -->
            <li>
                <a href="#" class="course-link" data-course-id="<%= course.course_id %>"><%= course.course_name %></a>
                <div class="module-list" data-course-id="<%= course.course_id %>"<%= course.module_name %>>
                    <h4>Modules</h4>
                    <ul class="module-items">
                        <% if (modules && modules.length > 0) { %> <!-- Check if modules exist -->
                            <% modules.forEach(module => { %>
                                <li>
                                    <a href="#" class="module-link" data-module-id="<%= module.module_id %>"><%= module.module_name %></a>
                                </li>
                            <% }); %>
                        <% } else { %>
                            <li>No modules available for this course.</li>
                        <% } %>
                    </ul>
                </div>
            </li>
        <% } %>
    <% }); %>
<% } else { %>
    <li>No courses available</li>
<% } %>

</ul>

    </div>
    
    <div id="content">
        <h2 id="course-name"><%= courseName || 'Select a Course' %></h2>
        <p id="course-description"><%= courseDescription || 'Course description will appear here.' %></p>
        <div id="module-name"></div>
        <div id="module-description"></div>
        <ul id="material-list"></ul>
        <ul id="quiz-list"></ul>
        <ul id="exercise-list"></ul>
        <div class="module-navigation">
            <button id="prev-module" class="nav-btn">&larr;</button>
            <button id="next-module" class="nav-btn">&rarr;</button>
        </div>
    </div>
</div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const courseList = document.getElementById('course-list');
        const courseNameElement = document.getElementById('course-name');
        const courseDescriptionElement = document.getElementById('course-description');
        const moduleNameElement = document.getElementById('module-name');
        const moduleDescriptionElement = document.getElementById('module-description');
        const materialList = document.getElementById('material-list');
        const quizList = document.getElementById('quiz-list');
        const exerciseList =document.getElementById('exercise-list');
        const sidebar = document.getElementById('sidebar');
        
    const prevButton = document.getElementById('prev-module');
    const nextButton = document.getElementById('next-module');
            courseList.addEventListener('click', async (event) => {
                if (event.target && event.target.classList.contains('course-link')) {
                    event.preventDefault();
                    const courseId = event.target.dataset.courseId;

                    // Hide all module lists and remove module list content from other courses
                    document.querySelectorAll('.module-list').forEach(moduleList => {
                        if (moduleList.dataset.courseId !== courseId) {
                            moduleList.style.display = 'none';
                        }
                    });

                    const selectedModuleList = document.querySelector(`.module-list[data-course-id="${courseId}"]`);

                    try {
                        // Show loading message
                        courseNameElement.textContent = 'Loading...';
                        courseDescriptionElement.textContent = '';

                        // Fetch modules for the selected course
                        const response = await fetch(`/courses/${courseId}/modules`);
                        const data = await response.json();

                        // Update course content
                        courseNameElement.textContent = data.courseName || 'Course Name';
                        courseDescriptionElement.textContent = data.courseDescription || 'Course Description';

                        // Show or update the module list for the selected course
                        if (selectedModuleList) {
                            selectedModuleList.style.display = 'block';
                            const moduleItemsElement = selectedModuleList.querySelector('.module-items');
                            moduleItemsElement.innerHTML = '';
                            data.modules.forEach(module => {
                                moduleItemsElement.innerHTML += `<li><a href="#" class="module-link" data-module-id="${module.module_id}">${module.module_name}</a></li>`;
                            });
                        }

                        // Clear materials and quizzes
                        materialList.innerHTML = '';
                        quizList.innerHTML = '';
                        moduleNameElement.textContent = '';
                        moduleDescriptionElement.textContent = '';
                    } catch (error) {
                        console.error('Error fetching course modules:', error);
                        courseNameElement.textContent = 'Error loading course';
                        courseDescriptionElement.textContent = '';
                    }
                }
            });

            
            sidebar.addEventListener('click', async (event) => {
                if (event.target && event.target.classList.contains('module-link')) {
                    event.preventDefault();
                    const moduleId = event.target.dataset.moduleId;

                    try {
                        // Show loading message
                        moduleNameElement.textContent = 'Loading...';
                        moduleDescriptionElement.textContent = '';

                        // Fetch module details, materials, and quizzes
                        const moduleResponse = await fetch(`/modules/${moduleId}`);
                        const moduleData = await moduleResponse.json();

                        // Update content with module and materials
                        moduleNameElement.textContent = moduleData.module_name || 'Module Name';
                        moduleDescriptionElement.textContent = moduleData.description || 'Module Description';

                        // Update content with materials
                        materialList.innerHTML = '<h3>Materials</h3><ul>';
                        moduleData.materials.forEach(material => {
                            materialList.innerHTML += `
                                <li>
                                    <span class="material-description">${material.description}</span><br>
                                    <a href="#" class="material-link" data-material-id="${material.material_id}">${material.link}</a>
                                </li>`;
                        });
                        materialList.innerHTML += '</ul>';

                        // Update content with quizzes
                        quizList.innerHTML = '<h3>Quizzes</h3><ul>';
                        if (moduleData.quizzes.length === 0) {
                            quizList.innerHTML += '<li>No quizzes available.</li>';
                        } else {
                            moduleData.quizzes.forEach(quiz => {
                                quizList.innerHTML += `<li><a href="/quiz/start/${quiz.quiz_id}">${quiz.quiz_title}</a></li>`;
                            });
                        }
                        quizList.innerHTML += '</ul>';
                    // Update content with exercises
                    exerciseList.innerHTML = '<h3>Exercises</h3><ul>';
                    if (moduleData.exercises.length === 0) {
                        exerciseList.innerHTML += '<li>No exercises available.</li>';
                    } else {
                        moduleData.exercises.forEach(exercise => {
                            exerciseList.innerHTML += `<a href="/exercises/${exercise.exercise_id}" class="exercise-link">Go to Exercise</a>`;
                        });
                    }
                    exerciseList.innerHTML += '</ul>';
                } catch (error) {
                    console.error('Error fetching module details, materials, or quizzes:', error);
                    moduleNameElement.textContent = 'Error loading module';
                    moduleDescriptionElement.textContent = '';
                    materialList.innerHTML = '<li>Error loading materials.</li>';
                    quizList.innerHTML = '<li>Error loading quizzes.</li>';
                    quizList.innerHTML = '<li>Error loading exercises.</li>';
                }
            }
        });

        materialList.addEventListener('click', async (event) => {
            if (event.target && event.target.classList.contains('material-link')) {
                event.preventDefault();
                const materialId = event.target.dataset.materialId;

                try {
                    // Fetch material details
                    const response = await fetch(`/materials/${materialId}`);
                    if (response.redirected) {
                        // Redirect to login page if not authenticated
                        window.location.href = response.url;
                    } else {
                        const material = await response.json();
                        // Open material link in a new tab
                        window.open(material.link, '_blank');
                    }
                } catch (error) {
                    console.error('Error fetching material details:', error);
                }
            }
        });
    });
    document.addEventListener('DOMContentLoaded', () => {
    let currentModuleIndex = 0;
    let modules = [];

    const prevButton = document.getElementById('prev-module');
    const nextButton = document.getElementById('next-module');
    const courseList = document.getElementById('course-list');
    const moduleNameElement = document.getElementById('module-name');
    const materialList = document.getElementById('material-list');
    const quizList = document.getElementById('quiz-list');
    const exerciseList = document.getElementById('exercise-list');
// Fetch and load modules when a course is selected
courseList.addEventListener('click', async (event) => {
    if (event.target && event.target.classList.contains('course-link')) {
        event.preventDefault();
        const courseId = event.target.dataset.courseId;

        try {
            // Fetch course modules
            const response = await fetch(`/courses/${courseId}/modules`);
            const data = await response.json();

            // Update the modules list
            modules = data.modules.map(module => ({
                id: module.module_id,
                name: module.module_name
            }));

            // Automatically load the first module
            currentModuleIndex = 0;
            loadModule(currentModuleIndex);
            updateButtonState();
        } catch (error) {
            console.error('Error fetching course modules:', error);
        }
    }
});


    // Function to load a module by index
    const loadModule = async (index) => {
        if (modules[index]) {
            const moduleId = modules[index].id;

            try {
                // Fetch module details
                const moduleResponse = await fetch(`/modules/${moduleId}`);
                const moduleData = await moduleResponse.json();

                // Update module content
                moduleNameElement.textContent = moduleData.module_name || 'Module Name';
                materialList.innerHTML = '<h3>Materials</h3><ul>';
                moduleData.materials.forEach(material => {
                    materialList.innerHTML += `
                        <li>
                            <span class="material-description">${material.description}</span><br>
                            <a href="#" class="material-link" data-material-id="${material.material_id}">${material.link}</a>
                        </li>`;
                });
                materialList.innerHTML += '</ul>';

                // Update quizzes
                quizList.innerHTML = '<h3>Quizzes</h3><ul>';
                moduleData.quizzes.forEach(quiz => {
                    quizList.innerHTML += `<li><a href="/quiz/start/${quiz.quiz_id}">${quiz.quiz_title}</a></li>`;
                });
                quizList.innerHTML += '</ul>';

                // Update exercises
                exerciseList.innerHTML = '<h3>Exercises</h3><ul>';
                moduleData.exercises.forEach(exercise => {
                    exerciseList.innerHTML += `<li><a href="/exercises/${exercise.exercise_id}" class="exercise-link">Go to Exercise</a></li>`;
                });
                exerciseList.innerHTML += '</ul>';
            } catch (error) {
                console.error('Error fetching module details:', error);
            }
        }
    };

    // Update the button states
    const updateButtonState = () => {
        prevButton.disabled = currentModuleIndex === 0;
        nextButton.disabled = currentModuleIndex === modules.length - 1;
    };

    // Event listener for the previous button
    prevButton.addEventListener('click', () => {
        if (currentModuleIndex > 0) {
            currentModuleIndex--;
            loadModule(currentModuleIndex);
            updateButtonState();
        }
    });

    // Event listener for the next button
    nextButton.addEventListener('click', () => {
        if (currentModuleIndex < modules.length - 1) {
            currentModuleIndex++;
            loadModule(currentModuleIndex);
            updateButtonState();
        }
    });
});

</script>
</body>
</html>

